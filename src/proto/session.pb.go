// Code generated by protoc-gen-go. DO NOT EDIT.
// source: session.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	session.proto

It has these top-level messages:
	TokenString
	AccountID
	AccountType
	Payload
	Status
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Type int32

const (
	Type_STANDARD Type = 0
	Type_PREMIUM  Type = 1
	Type_ADMIN    Type = 2
)

var Type_name = map[int32]string{
	0: "STANDARD",
	1: "PREMIUM",
	2: "ADMIN",
}
var Type_value = map[string]int32{
	"STANDARD": 0,
	"PREMIUM":  1,
	"ADMIN":    2,
}

func (x Type) String() string {
	return proto1.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type TokenString struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *TokenString) Reset()                    { *m = TokenString{} }
func (m *TokenString) String() string            { return proto1.CompactTextString(m) }
func (*TokenString) ProtoMessage()               {}
func (*TokenString) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TokenString) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type AccountID struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *AccountID) Reset()                    { *m = AccountID{} }
func (m *AccountID) String() string            { return proto1.CompactTextString(m) }
func (*AccountID) ProtoMessage()               {}
func (*AccountID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AccountID) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type AccountType struct {
	Type Type `protobuf:"varint,1,opt,name=type,enum=proto.Type" json:"type,omitempty"`
}

func (m *AccountType) Reset()                    { *m = AccountType{} }
func (m *AccountType) String() string            { return proto1.CompactTextString(m) }
func (*AccountType) ProtoMessage()               {}
func (*AccountType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AccountType) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_STANDARD
}

type Payload struct {
	Id   uint64       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type *AccountType `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (m *Payload) Reset()                    { *m = Payload{} }
func (m *Payload) String() string            { return proto1.CompactTextString(m) }
func (*Payload) ProtoMessage()               {}
func (*Payload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Payload) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Payload) GetType() *AccountType {
	if m != nil {
		return m.Type
	}
	return nil
}

type Status struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto1.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Status) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto1.RegisterType((*TokenString)(nil), "proto.TokenString")
	proto1.RegisterType((*AccountID)(nil), "proto.AccountID")
	proto1.RegisterType((*AccountType)(nil), "proto.AccountType")
	proto1.RegisterType((*Payload)(nil), "proto.Payload")
	proto1.RegisterType((*Status)(nil), "proto.Status")
	proto1.RegisterEnum("proto.Type", Type_name, Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SessionService service

type SessionServiceClient interface {
	GetAccountIDFromToken(ctx context.Context, in *TokenString, opts ...grpc.CallOption) (*AccountID, error)
	GetAccountTypeFromToken(ctx context.Context, in *TokenString, opts ...grpc.CallOption) (*AccountType, error)
	CreateToken(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*TokenString, error)
	RefreshToken(ctx context.Context, in *TokenString, opts ...grpc.CallOption) (*TokenString, error)
	DeleteToken(ctx context.Context, in *TokenString, opts ...grpc.CallOption) (*Status, error)
}

type sessionServiceClient struct {
	cc *grpc.ClientConn
}

func NewSessionServiceClient(cc *grpc.ClientConn) SessionServiceClient {
	return &sessionServiceClient{cc}
}

func (c *sessionServiceClient) GetAccountIDFromToken(ctx context.Context, in *TokenString, opts ...grpc.CallOption) (*AccountID, error) {
	out := new(AccountID)
	err := grpc.Invoke(ctx, "/proto.SessionService/GetAccountIDFromToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) GetAccountTypeFromToken(ctx context.Context, in *TokenString, opts ...grpc.CallOption) (*AccountType, error) {
	out := new(AccountType)
	err := grpc.Invoke(ctx, "/proto.SessionService/GetAccountTypeFromToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) CreateToken(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*TokenString, error) {
	out := new(TokenString)
	err := grpc.Invoke(ctx, "/proto.SessionService/CreateToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) RefreshToken(ctx context.Context, in *TokenString, opts ...grpc.CallOption) (*TokenString, error) {
	out := new(TokenString)
	err := grpc.Invoke(ctx, "/proto.SessionService/RefreshToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) DeleteToken(ctx context.Context, in *TokenString, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/proto.SessionService/DeleteToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SessionService service

type SessionServiceServer interface {
	GetAccountIDFromToken(context.Context, *TokenString) (*AccountID, error)
	GetAccountTypeFromToken(context.Context, *TokenString) (*AccountType, error)
	CreateToken(context.Context, *Payload) (*TokenString, error)
	RefreshToken(context.Context, *TokenString) (*TokenString, error)
	DeleteToken(context.Context, *TokenString) (*Status, error)
}

func RegisterSessionServiceServer(s *grpc.Server, srv SessionServiceServer) {
	s.RegisterService(&_SessionService_serviceDesc, srv)
}

func _SessionService_GetAccountIDFromToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).GetAccountIDFromToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SessionService/GetAccountIDFromToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).GetAccountIDFromToken(ctx, req.(*TokenString))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_GetAccountTypeFromToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).GetAccountTypeFromToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SessionService/GetAccountTypeFromToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).GetAccountTypeFromToken(ctx, req.(*TokenString))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SessionService/CreateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).CreateToken(ctx, req.(*Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SessionService/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).RefreshToken(ctx, req.(*TokenString))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SessionService/DeleteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).DeleteToken(ctx, req.(*TokenString))
	}
	return interceptor(ctx, in, info, handler)
}

var _SessionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SessionService",
	HandlerType: (*SessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountIDFromToken",
			Handler:    _SessionService_GetAccountIDFromToken_Handler,
		},
		{
			MethodName: "GetAccountTypeFromToken",
			Handler:    _SessionService_GetAccountTypeFromToken_Handler,
		},
		{
			MethodName: "CreateToken",
			Handler:    _SessionService_CreateToken_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _SessionService_RefreshToken_Handler,
		},
		{
			MethodName: "DeleteToken",
			Handler:    _SessionService_DeleteToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session.proto",
}

func init() { proto1.RegisterFile("session.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x50, 0x5f, 0x4b, 0xfb, 0x40,
	0x10, 0xfc, 0x25, 0xf4, 0xef, 0x5e, 0x1b, 0xc2, 0xf2, 0x13, 0x4b, 0x7d, 0xb0, 0x44, 0x90, 0x22,
	0x52, 0xb4, 0x82, 0x6f, 0x3e, 0x04, 0xa3, 0x92, 0x87, 0x96, 0x72, 0xa9, 0x1f, 0x20, 0xa6, 0xab,
	0x06, 0x6b, 0xae, 0xdc, 0x5d, 0x85, 0x7e, 0x2a, 0xbf, 0xa2, 0xf4, 0x72, 0xd5, 0x2a, 0x45, 0x9f,
	0x8e, 0xb9, 0xd9, 0x99, 0x9d, 0x1d, 0x68, 0x2b, 0x52, 0x2a, 0x17, 0xc5, 0x60, 0x21, 0x85, 0x16,
	0x58, 0x35, 0x4f, 0x70, 0x04, 0x6c, 0x2a, 0x5e, 0xa8, 0x48, 0xb4, 0xcc, 0x8b, 0x27, 0xfc, 0x0f,
	0x55, 0xbd, 0x86, 0x1d, 0xa7, 0xe7, 0xf4, 0x9b, 0xbc, 0x04, 0xc1, 0x01, 0x34, 0xc3, 0x2c, 0x13,
	0xcb, 0x42, 0xc7, 0x11, 0x7a, 0xe0, 0xe6, 0x33, 0xc3, 0x57, 0xb8, 0x9b, 0xcf, 0x82, 0x01, 0x30,
	0x4b, 0x4e, 0x57, 0x0b, 0xc2, 0x43, 0xa8, 0xe8, 0xd5, 0x82, 0xcc, 0x80, 0x37, 0x64, 0xe5, 0xb6,
	0xc1, 0x9a, 0xe2, 0x86, 0x08, 0x42, 0xa8, 0x4f, 0xd2, 0xd5, 0x5c, 0xa4, 0xb3, 0x9f, 0x56, 0x78,
	0x6c, 0xb5, 0x6e, 0xcf, 0xe9, 0xb3, 0x21, 0x5a, 0xed, 0x96, 0xbb, 0xb5, 0x08, 0xa0, 0x96, 0xe8,
	0x54, 0x2f, 0x15, 0x76, 0xa0, 0xae, 0x96, 0x59, 0x46, 0x4a, 0x19, 0x9b, 0x06, 0xdf, 0xc0, 0x93,
	0x53, 0xa8, 0x98, 0x3c, 0x2d, 0x68, 0x24, 0xd3, 0x70, 0x1c, 0x85, 0x3c, 0xf2, 0xff, 0x21, 0x83,
	0xfa, 0x84, 0xdf, 0x8c, 0xe2, 0xfb, 0x91, 0xef, 0x60, 0x13, 0xaa, 0x61, 0x34, 0x8a, 0xc7, 0xbe,
	0x3b, 0x7c, 0x77, 0xc1, 0x4b, 0xca, 0x7e, 0x12, 0x92, 0x6f, 0x79, 0x46, 0x78, 0x05, 0x7b, 0x77,
	0xa4, 0x3f, 0xef, 0xbe, 0x95, 0xe2, 0xd5, 0x34, 0x85, 0x9b, 0x5c, 0x5b, 0xbd, 0x75, 0xfd, 0xef,
	0x59, 0xe3, 0x08, 0x43, 0xd8, 0xff, 0x92, 0xaf, 0x93, 0xfc, 0x6e, 0xb0, 0xe3, 0x58, 0x3c, 0x07,
	0x76, 0x2d, 0x29, 0xd5, 0x54, 0xca, 0x3c, 0x3b, 0x62, 0xdb, 0xeb, 0xee, 0xb0, 0xc1, 0x4b, 0x68,
	0x71, 0x7a, 0x94, 0xa4, 0x9e, 0xff, 0x5e, 0xb5, 0xad, 0x3b, 0x03, 0x16, 0xd1, 0x9c, 0x36, 0xab,
	0x76, 0xc9, 0xda, 0xf6, 0xaf, 0x6c, 0xfe, 0xa1, 0x66, 0xd0, 0xc5, 0x47, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x4d, 0xc1, 0x62, 0x42, 0x57, 0x02, 0x00, 0x00,
}
